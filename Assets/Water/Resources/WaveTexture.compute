// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel WaveTexture
#pragma kernel WaveNormalKernel

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

//input
RWTexture2D<float4> WaveHeightField;
RWTexture2D<float4> WaveHorizontal;


RWTexture2D<float4> WaveDisplacement;
RWTexture2D<float4> WaveNormal;

[numthreads(16,16,1)]
void WaveTexture (uint3 id : SV_DispatchThreadID)
{
    float h = WaveHeightField[id.xy].x;
    float4 horizontalData = WaveHorizontal[id.xy];

    WaveDisplacement[id.xy] = float4(horizontalData.x, h, horizontalData.z, 1.0);
}


[numthreads(16,16,1)]
void WaveNormalKernel(uint3 id : SV_DispatchThreadID)
{
    float4 x1 = WaveDisplacement[id.xy+uint2( 1, 0)];
    float4 x2 = WaveDisplacement[id.xy+uint2(-1, 0)];

    float4 y1 = WaveDisplacement[id.xy+uint2( 0, 1)];
    float4 y2 = WaveDisplacement[id.xy+uint2( 0, -1)];

    float3 d_x = (x1 - x2).xyz;
    float3 d_y = (y1 - y2).xyz;


    float3 normal = normalize(cross(d_x, d_y));
    WaveNormal[id.xy] = float4(normal, 1.0);
}