// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel WaveTexture
#pragma kernel WaveNormalKernel
#pragma kernel WaveWhitecap
#include "HLSLSupport.cginc"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

//input
RWTexture2D<float4> WaveHeightField;
RWTexture2D<float4> WaveHorizontal;


RWTexture2D<float4> WaveDisplacement;
RWTexture2D<float4> WaveNormal;
RWTexture2D<float4> WaveFoamJocobian;
RWTexture2D<float4> WaveFoamJxy;
RWTexture2D<float4> WaveFoam;

CBUFFER_START(WaveBuffer)
float unitLen; //Meters
float4 targetPos;
float amplitude;
CBUFFER_END






[numthreads(16,16,1)]
void WaveTexture (uint3 id : SV_DispatchThreadID)
{
    float h = WaveHeightField[id.xy].x;
    float4 horizontalData = WaveHorizontal[id.xy];
	
	//float distance = abs(length(float2(256, 256) - id.xy));
	float distance = abs(length(targetPos.xy - id.xy));
	const float len = 100;
	const float height = 100;
	const float addH = smoothstep(0, 1, saturate((len - distance) / len)) * height;
	//h -= addH;

    WaveDisplacement[id.xy] = float4(horizontalData.x, h, horizontalData.z, 1.0);

    float4 j_x_y_Data = WaveFoamJocobian[id.xy];
    float jx =  0.2 * j_x_y_Data.x;
    float jy =  0.2 * j_x_y_Data.z;
    float jxy = 0.2 * WaveFoamJxy[id.xy].x;
    float j = 1 + jx + jy +jx * jy - jxy * jxy;
    float jj =  j * j;

    WaveFoam[id.xy] = float4(j, jj, j, 1.0);
}


[numthreads(16,16,1)]
void WaveWhitecap(uint3 id : SV_DispatchThreadID)
{

}

[numthreads(16,16,1)]
void WaveNormalKernel(uint3 id : SV_DispatchThreadID)
{
	float width, height;
	WaveDisplacement.GetDimensions(width, height);
	//unitLen = 1.0;
	uint2 uv;
	uv = id.xy + uint2(1, 0);
	uv = uv % (int)width;
	float4 x1 = WaveDisplacement[uv];

	uv = id.xy + uint2(-1, 0);
	uv = uv % (int)width;
	float4 x2 = WaveDisplacement[uv];

	uv = id.xy + uint2(0, 1);
	uv = uv % (int)width;
	float4 y1 = WaveDisplacement[uv];

	uv = id.xy + uint2(0, -1);
	uv = uv % (int)width;
	float4 y2 = WaveDisplacement[uv];

	float3 d_x = float3(-2 * (unitLen/ width), (x1 - x2).y, 0);
	float3 d_y = float3(0, (y1 - y2).y, -2 * (unitLen/ width));


	float3 normal = normalize(cross(d_x, d_y));
	//normal.y = abs(normal.y); // y is always up for now
	normal.y *= -1;
	WaveNormal[id.xy] = float4(normal, 1.0);
}



/* tmp
float nScale = 1.0 / 10;
float uPixel = 1.0 / 512.0;
float vPixel = 1.0 / 512.0;
float4 uv = float4(o.uv / 5.0, 0, 0);
float height_pu = tex2Dlod(_Displacement, uv + float4(uPixel, 0, 0, 0)).y;
float height_mu = tex2Dlod(_Displacement, uv - float4(uPixel, 0, 0, 0)).y;
float height_pv = tex2Dlod(_Displacement, uv + float4(0, vPixel, 0, 0)).y;
float height_mv = tex2Dlod(_Displacement, uv - float4(0, vPixel, 0, 0)).y;
float du = height_mu - height_pu;
float dv = height_mv - height_pv;
float3 N = normalize(float3(du, dv, 1.0/nScale));
normal = N;
normal = float3(N.x, N.z, N.y);

*/